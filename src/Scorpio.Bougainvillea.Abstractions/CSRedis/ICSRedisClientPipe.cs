using System;
using System.Collections.Generic;

namespace CSRedis
{
    public interface ICSRedisClientPipe<TObject>
    {
        int Counter { get; }

        ICSRedisClientPipe<long> Append(string key, object value);
        ICSRedisClientPipe<long> BitCount(string key, long start, long end);
        ICSRedisClientPipe<long> BitOp(RedisBitOp op, string destKey, params string[] keys);
        ICSRedisClientPipe<long> BitPos(string key, bool bit, long? start = null, long? end = null);
        ICSRedisClientPipe<long> Del(string key);
        void Dispose();
        ICSRedisClientPipe<byte[]> Dump(string key);
        object[] EndPipe();
        ICSRedisClientPipe<object> Eval(string script, string key, params object[] args);
        ICSRedisClientPipe<object> EvalSHA(string sha1, string key, params object[] args);
        ICSRedisClientPipe<bool> Exists(string key);
        ICSRedisClientPipe<bool> Expire(string key, int seconds);
        ICSRedisClientPipe<bool> Expire(string key, TimeSpan expire);
        ICSRedisClientPipe<bool> ExpireAt(string key, DateTime expire);
        ICSRedisClientPipe<string> Get(string key);
        ICSRedisClientPipe<T> Get<T>(string key);
        ICSRedisClientPipe<bool> GetBit(string key, uint offset);
        ICSRedisClientPipe<string> GetRange(string key, long start, long end);
        ICSRedisClientPipe<T> GetRange<T>(string key, long start, long end);
        ICSRedisClientPipe<string> GetSet(string key, object value);
        ICSRedisClientPipe<T> GetSet<T>(string key, object value);
        ICSRedisClientPipe<long> HDel(string key, params string[] fields);
        ICSRedisClientPipe<bool> HExists(string key, string field);
        ICSRedisClientPipe<string> HGet(string key, string field);
        ICSRedisClientPipe<T> HGet<T>(string key, string field);
        ICSRedisClientPipe<Dictionary<string, string>> HGetAll(string key);
        ICSRedisClientPipe<Dictionary<string, T>> HGetAll<T>(string key);
        ICSRedisClientPipe<long> HIncrBy(string key, string field, long value = 1);
        ICSRedisClientPipe<double> HIncrByFloat(string key, string field, double value);
        ICSRedisClientPipe<string[]> HKeys(string key);
        ICSRedisClientPipe<long> HLen(string key);
        ICSRedisClientPipe<string[]> HMGet(string key, params string[] fields);
        ICSRedisClientPipe<T[]> HMGet<T>(string key, params string[] fields);
        ICSRedisClientPipe<bool> HMSet(string key, params object[] keyValues);
        ICSRedisClientPipe<RedisScan<(string field, string value)>> HScan(string key, long cursor, string pattern = null, long? count = null);
        ICSRedisClientPipe<RedisScan<(string field, T value)>> HScan<T>(string key, long cursor, string pattern = null, long? count = null);
        ICSRedisClientPipe<bool> HSet(string key, string field, object value);
        ICSRedisClientPipe<bool> HSetNx(string key, string field, object value);
        ICSRedisClientPipe<long> HStrLen(string key, string field);
        ICSRedisClientPipe<string[]> HVals(string key);
        ICSRedisClientPipe<T[]> HVals<T>(string key);
        ICSRedisClientPipe<long> IncrBy(string key, long value = 1);
        ICSRedisClientPipe<double> IncrBy(string key, double value);
        ICSRedisClientPipe<string[]> Keys(string pattern);
        ICSRedisClientPipe<string> LIndex(string key, long index);
        ICSRedisClientPipe<T> LIndex<T>(string key, long index);
        ICSRedisClientPipe<long> LInsertAfter(string key, string pivot, object value);
        ICSRedisClientPipe<long> LInsertBefore(string key, string pivot, object value);
        ICSRedisClientPipe<long> LLen(string key);
        ICSRedisClientPipe<string> LPop(string key);
        ICSRedisClientPipe<T> LPop<T>(string key);
        ICSRedisClientPipe<long> LPush<T>(string key, params T[] value);
        ICSRedisClientPipe<long> LPushX(string key, object value);
        ICSRedisClientPipe<string[]> LRange(string key, long start, long stop);
        ICSRedisClientPipe<T[]> LRange<T>(string key, long start, long stop);
        ICSRedisClientPipe<long> LRem(string key, long count, object value);
        ICSRedisClientPipe<bool> LSet(string key, long index, object value);
        ICSRedisClientPipe<bool> LTrim(string key, long start, long stop);
        ICSRedisClientPipe<string[]> MGet(params string[] keys);
        ICSRedisClientPipe<bool> Move(string key, int database);
        ICSRedisClientPipe<string> ObjectEncoding(string key);
        ICSRedisClientPipe<long?> ObjectIdleTime(string key);
        ICSRedisClientPipe<long?> ObjectRefCount(string key);
        ICSRedisClientPipe<bool> Persist(string key);
        ICSRedisClientPipe<bool> PExpire(string key, int milliseconds);
        ICSRedisClientPipe<bool> PExpire(string key, TimeSpan expire);
        ICSRedisClientPipe<bool> PExpireAt(string key, DateTime expire);
        ICSRedisClientPipe<bool> PfAdd<T>(string key, params T[] elements);
        ICSRedisClientPipe<long> PfCount(string key);
        ICSRedisClientPipe<long> PTtl(string key);
        ICSRedisClientPipe<long> Publish(string channel, string message);
        ICSRedisClientPipe<long> PublishNoneMessageId(string channel, string message);
        ICSRedisClientPipe<string> RandomKey();
        ICSRedisClientPipe<bool> Rename(string key, string newKey);
        ICSRedisClientPipe<bool> RenameNx(string key, string newKey);
        ICSRedisClientPipe<bool> Restore(string key, byte[] serializedValue);
        ICSRedisClientPipe<bool> Restore(string key, long ttlMilliseconds, byte[] serializedValue);
        ICSRedisClientPipe<string> RPop(string key);
        ICSRedisClientPipe<T> RPop<T>(string key);
        ICSRedisClientPipe<string> RPopLPush(string source, string destination);
        ICSRedisClientPipe<T> RPopLPush<T>(string source, string destination);
        ICSRedisClientPipe<long> RPush<T>(string key, params T[] value);
        ICSRedisClientPipe<long> RPushX(string key, object value);
        ICSRedisClientPipe<long> SAdd<T>(string key, params T[] members);
        ICSRedisClientPipe<RedisScan<string>> Scan(long cursor, string pattern = null, long? count = null);
        ICSRedisClientPipe<RedisScan<T>> Scan<T>(string key, long cursor, string pattern = null, long? count = null);
        ICSRedisClientPipe<long> SCard(string key);
        ICSRedisClientPipe<string[]> SDiff(params string[] keys);
        ICSRedisClientPipe<T[]> SDiff<T>(params string[] keys);
        ICSRedisClientPipe<long> SDiffStore(string destination, params string[] keys);
        ICSRedisClientPipe<bool> Set(string key, object value, int expireSeconds = -1, RedisExistence? exists = null);
        ICSRedisClientPipe<bool> Set(string key, object value, TimeSpan expire, RedisExistence? exists = null);
        ICSRedisClientPipe<bool> SetBit(string key, uint offset, bool value);
        ICSRedisClientPipe<bool> SetNx(string key, object value);
        ICSRedisClientPipe<long> SetRange(string key, uint offset, object value);
        ICSRedisClientPipe<string[]> SInter(params string[] keys);
        ICSRedisClientPipe<T[]> SInter<T>(params string[] keys);
        ICSRedisClientPipe<long> SInterStore(string destination, params string[] keys);
        ICSRedisClientPipe<bool> SIsMember(string key, object member);
        ICSRedisClientPipe<string[]> SMembers(string key);
        ICSRedisClientPipe<T[]> SMembers<T>(string key);
        ICSRedisClientPipe<bool> SMove(string source, string destination, object member);
        ICSRedisClientPipe<string[]> Sort(string key, long? count = null, long offset = 0, string by = null, RedisSortDir? dir = null, bool? isAlpha = null, params string[] get);
        ICSRedisClientPipe<long> SortAndStore(string key, string destination, long? count = null, long offset = 0, string by = null, RedisSortDir? dir = null, bool? isAlpha = null, params string[] get);
        ICSRedisClientPipe<string> SPop(string key);
        ICSRedisClientPipe<T> SPop<T>(string key);
        ICSRedisClientPipe<string> SRandMember(string key);
        ICSRedisClientPipe<T> SRandMember<T>(string key);
        ICSRedisClientPipe<string[]> SRandMembers(string key, int count = 1);
        ICSRedisClientPipe<T[]> SRandMembers<T>(string key, int count = 1);
        ICSRedisClientPipe<long> SRem<T>(string key, params T[] members);
        ICSRedisClientPipe<RedisScan<string>> SScan(string key, long cursor, string pattern = null, long? count = null);
        ICSRedisClientPipe<RedisScan<T>> SScan<T>(string key, long cursor, string pattern = null, long? count = null);
        ICSRedisClientPipe<long> StrLen(string key);
        ICSRedisClientPipe<string[]> SUnion(params string[] keys);
        ICSRedisClientPipe<T[]> SUnion<T>(params string[] keys);
        ICSRedisClientPipe<long> SUnionStore(string destination, params string[] keys);
        ICSRedisClientPipe<long> Touch(string key);
        ICSRedisClientPipe<long> Ttl(string key);
        ICSRedisClientPipe<long> UnLink(string key);
        ICSRedisClientPipe<long> ZAdd(string key, params (double, object)[] scoreMembers);
        ICSRedisClientPipe<long> ZCard(string key);
        ICSRedisClientPipe<long> ZCount(string key, double min, double max);
        ICSRedisClientPipe<long> ZCount(string key, string min, string max);
        ICSRedisClientPipe<double> ZIncrBy(string key, string member, double increment = 1);
        ICSRedisClientPipe<long> ZInterStore(string destination, double[] weights, RedisAggregate aggregate, params string[] keys);
        ICSRedisClientPipe<long> ZLexCount(string key, string min, string max);
        ICSRedisClientPipe<(string member, double score)[]> ZPopMax(string key, long count);
        ICSRedisClientPipe<(T member, double score)[]> ZPopMax<T>(string key, long count);
        ICSRedisClientPipe<(string member, double score)[]> ZPopMin(string key, long count);
        ICSRedisClientPipe<(T member, double score)[]> ZPopMin<T>(string key, long count);
        ICSRedisClientPipe<string[]> ZRange(string key, long start, long stop);
        ICSRedisClientPipe<T[]> ZRange<T>(string key, long start, long stop);
        ICSRedisClientPipe<string[]> ZRangeByLex(string key, string min, string max, long? count = null, long offset = 0);
        ICSRedisClientPipe<T[]> ZRangeByLex<T>(string key, string min, string max, long? count = null, long offset = 0);
        ICSRedisClientPipe<string[]> ZRangeByScore(string key, double min, double max, long? count = null, long offset = 0);
        ICSRedisClientPipe<string[]> ZRangeByScore(string key, string min, string max, long? count = null, long offset = 0);
        ICSRedisClientPipe<T[]> ZRangeByScore<T>(string key, double min, double max, long? count = null, long offset = 0);
        ICSRedisClientPipe<T[]> ZRangeByScore<T>(string key, string min, string max, long? count = null, long offset = 0);
        ICSRedisClientPipe<(string member, double score)[]> ZRangeByScoreWithScores(string key, double min, double max, long? count = null, long offset = 0);
        ICSRedisClientPipe<(string member, double score)[]> ZRangeByScoreWithScores(string key, string min, string max, long? count = null, long offset = 0);
        ICSRedisClientPipe<(T member, double score)[]> ZRangeByScoreWithScores<T>(string key, double min, double max, long? count = null, long offset = 0);
        ICSRedisClientPipe<(T member, double score)[]> ZRangeByScoreWithScores<T>(string key, string min, string max, long? count = null, long offset = 0);
        ICSRedisClientPipe<(string member, double score)[]> ZRangeWithScores(string key, long start, long stop);
        ICSRedisClientPipe<(T member, double score)[]> ZRangeWithScores<T>(string key, long start, long stop);
        ICSRedisClientPipe<long?> ZRank(string key, object member);
        ICSRedisClientPipe<long> ZRem<T>(string key, params T[] member);
        ICSRedisClientPipe<long> ZRemRangeByLex(string key, string min, string max);
        ICSRedisClientPipe<long> ZRemRangeByRank(string key, long start, long stop);
        ICSRedisClientPipe<long> ZRemRangeByScore(string key, double min, double max);
        ICSRedisClientPipe<long> ZRemRangeByScore(string key, string min, string max);
        ICSRedisClientPipe<string[]> ZRevRange(string key, long start, long stop);
        ICSRedisClientPipe<T[]> ZRevRange<T>(string key, long start, long stop);
        ICSRedisClientPipe<string[]> ZRevRangeByScore(string key, double max, double min, long? count = null, long? offset = 0);
        ICSRedisClientPipe<string[]> ZRevRangeByScore(string key, string max, string min, long? count = null, long? offset = 0);
        ICSRedisClientPipe<T[]> ZRevRangeByScore<T>(string key, double max, double min, long? count = null, long offset = 0);
        ICSRedisClientPipe<T[]> ZRevRangeByScore<T>(string key, string max, string min, long? count = null, long offset = 0);
        ICSRedisClientPipe<(string member, double score)[]> ZRevRangeByScoreWithScores(string key, double max, double min, long? count = null, long offset = 0);
        ICSRedisClientPipe<(string member, double score)[]> ZRevRangeByScoreWithScores(string key, string max, string min, long? count = null, long offset = 0);
        ICSRedisClientPipe<(T member, double score)[]> ZRevRangeByScoreWithScores<T>(string key, double max, double min, long? count = null, long offset = 0);
        ICSRedisClientPipe<(T member, double score)[]> ZRevRangeByScoreWithScores<T>(string key, string max, string min, long? count = null, long offset = 0);
        ICSRedisClientPipe<(string member, double score)[]> ZRevRangeWithScores(string key, long start, long stop);
        ICSRedisClientPipe<(T member, double score)[]> ZRevRangeWithScores<T>(string key, long start, long stop);
        ICSRedisClientPipe<long?> ZRevRank(string key, object member);
        ICSRedisClientPipe<RedisScan<(string member, double score)>> ZScan(string key, long cursor, string pattern = null, long? count = null);
        ICSRedisClientPipe<RedisScan<(T member, double score)>> ZScan<T>(string key, long cursor, string pattern = null, long? count = null);
        ICSRedisClientPipe<double?> ZScore(string key, object member);
        ICSRedisClientPipe<long> ZUnionStore(string destination, double[] weights, RedisAggregate aggregate, params string[] keys);
    }
}